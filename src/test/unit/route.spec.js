// Generated by CoffeeScript 1.4.0
var core, coreModule, datastore, route, should, sinon;

should = require("should");

sinon = require("sinon");

coreModule = require("../../../src/core");

core = coreModule.core;

datastore = coreModule.datastore;

route = require("../../../src/route").route;

describe("route", function() {
  beforeEach(function() {
    sinon.stub(core, "addStory");
    return sinon.stub(core, "listStories");
  });
  afterEach(function() {
    core.addStory.restore();
    return core.listStories.restore();
  });
  it('index points to right template and contains title', function() {
    return route.index(null, {
      render: function(filename, params) {
        filename.should.equal("index.ect");
        return params.title.should.equal("Foresee");
      }
    });
  });
  it('join points to right template with roomname parameter', function() {
    return route.join({
      params: {
        id: "bombRoom"
      },
      headers: {
        host: "any host"
      }
    }, {
      render: function(filename, params) {
        filename.should.equal("join.ect");
        params.id.should.equal("bombRoom");
        return params.socketUrl.should.equal("http://any host");
      }
    });
  });
  return it('story/add calls method in core', function() {
    var listResult, newStory, roomName;
    datastore.clear();
    roomName = "someroom";
    newStory = "new story";
    listResult = ["old story", newStory];
    core.listStories.withArgs(roomName).returns(listResult);
    return route.addStory({
      params: {
        "room": roomName,
        "story": newStory
      }
    }, {
      send: function(result) {
        core.addStory.calledOnce.should.be["true"];
        core.addStory.calledWith(roomName, newStory).should.be["true"];
        return result.should.eql(listResult);
      }
    });
  });
});
