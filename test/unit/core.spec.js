// Generated by CoffeeScript 1.4.0
var core, coreModule, datastore, setupParticipant, setupStory, should;

should = require("should");

coreModule = require("../../src/core");

core = coreModule.core;

datastore = coreModule.datastore;

setupStory = function(roomName, amount) {
  var i, _i;
  if (roomName == null) {
    roomName = 'roomName';
  }
  if (amount == null) {
    amount = 1;
  }
  for (i = _i = 1; 1 <= amount ? _i <= amount : _i >= amount; i = 1 <= amount ? ++_i : --_i) {
    core.addStory(roomName, "story" + i);
  }
  return core.listStories(roomName);
};

setupParticipant = function(roomName, amount) {
  var i, _i;
  if (roomName == null) {
    roomName = 'roomName';
  }
  if (amount == null) {
    amount = 1;
  }
  for (i = _i = 1; 1 <= amount ? _i <= amount : _i >= amount; i = 1 <= amount ? ++_i : --_i) {
    core.addParticipant(roomName, "participant" + i);
  }
  return core.listParticipants(roomName);
};

describe("core", function() {
  beforeEach(function() {
    return datastore.clear();
  });
  describe('addStory()', function() {
    return it('can add first story, #storiesExist', function() {
      var result;
      result = setupStory('roomName', 1);
      return result.should.eql({
        story1: null
      });
    });
  });
  describe('listStory()', function() {
    it('returns blank when no stories, #storiesExist', function() {
      var result;
      result = core.listStories('roomName');
      return result.should.eql({});
    });
    return it('stories are listed in order of addition', function() {
      var result;
      result = setupStory('roomName', 2);
      return result.should.eql({
        story1: null,
        story2: null
      });
    });
  });
  describe('addParticipant()', function() {
    it('add first participant should be in list, #participantExists', function() {
      var result;
      result = setupParticipant('roomName', 1);
      return result.should.eql({
        participant1: null
      });
    });
    return it('add two participant should set 2 value in data', function() {
      var result;
      result = setupParticipant('roomName', 2);
      return result.should.eql({
        participant1: null,
        participant2: null
      });
    });
  });
  describe('listParticipant()', function() {
    it('return blank when no participants, #participantExists', function() {
      var result;
      result = core.listParticipants('roomName');
      return result.should.eql({});
    });
    return it('list participants will return object of participants', function() {
      var result;
      result = setupParticipant('roomName', 1);
      return result.should.eql({
        participant1: null
      });
    });
  });
  describe('removeParticipant()', function() {
    it('should remove specified participant from set', function() {
      var result;
      setupParticipant('roomName', 2);
      core.removeParticipant('roomName', 'participant1');
      result = core.listParticipants('roomName');
      return result.should.eql({
        participant2: null
      });
    });
    return it('should not remove anything if a participant does not exist, #participantExists', function() {
      var result;
      setupParticipant('roomName', 1);
      core.removeParticipant('roomName', 'someBodyNotHere');
      result = core.listParticipants('roomName');
      return result.should.eql({
        participant1: null
      });
    });
  });
  return describe('vote()', function() {
    return it('should put cast result to participant', function() {
      var result;
      setupParticipant('roomName', 1);
      core.vote('roomName', 'participant1', 2);
      result = datastore.get('roomName');
      return result["participants"].should.eql({
        participant1: 2
      });
    });
  });
});
