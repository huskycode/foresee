// Generated by CoffeeScript 1.4.0
var ECT, app, assets, clientSockets, core, ectRenderer, express, getSocketUrl, io, route, sendRefreshMessage, server;

express = require('express');

assets = require('connect-assets');

app = express();

ECT = require('ect');

ectRenderer = ECT({
  cache: false,
  watch: false,
  root: __dirname + '/../views'
});

server = require('http').createServer(app);

io = require('socket.io').listen(server, {
  'log level': 1
});

server.port = process.env.PORT || process.env.VMC_APP_PORT || 3000;

app.use(assets());

app.use(express["static"](process.cwd() + '/public'));

app.engine('.ect', ectRenderer.render);

core = require("./core").core;

route = require("./route").route;

var websocket = require("./websocket").websocket(core);

clientSockets = [];


io.sockets.on('connection', function(socket) {
  clientSockets.push(socket);
  socket.on('removeParticipant', function(data) {
    core.removeParticipant(data.room, data.name);
    return clientSockets.forEach(function(item, i) {
      return websocket.sendRefreshMessage(item, data.room);
    });
  });
  socket.on('ask', function(data) {
    return websocket.sendRefreshMessage(socket, data.room);
  });
  socket.on('vote', function(data) {
    core.vote(data.room, data.name, data.vote);
    return clientSockets.forEach(function(item, i) {
      return websocket.sendRefreshMessage(item, data.room);
    });
  });
  socket.on('my other event', function(data) {
    return console.log(data);
  });
  return socket.on('disconnect', function() {
    var indexToRemove;
    indexToRemove = null;
    clientSockets.forEach(function(item, i) {
      if (item === socket) {
        return indexToRemove = i;
      }
    });
    if (indexToRemove !== null) {
      return clientSockets.splice(indexToRemove, 1);
    }
  });
});

getSocketUrl = function(req) {
  return "http://" + req.headers.host;
};

app.get('/host/:id', function(req, res) {
  return res.render('host.ect', {
    title: "Host - " + req.params.id,
    url: "http://" + req.headers.host + "/join/" + req.params.id,
    socketUrl: getSocketUrl(req),
    roomId: req.params.id
  });
});

app.get('/story/add/room/:room/story/:story', route.addStory);

app.get('/join/:id', route.join);

app.get('/', route.index);

app.get('/join/room/:room/name/:name', route.joinRoom(clientSockets));

module.exports = server;

module.exports.route = route;
