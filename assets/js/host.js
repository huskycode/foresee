// Generated by CoffeeScript 1.4.0
var HTTPBackend, HostPage, StoriesCtrl, countVoted, enableStartNowButton, getCardFace, getParticipantsLis, getStoriesLis, populateCards;

getParticipantsLis = function(participantNames) {
  var index, item, lis, _i, _len;
  lis = [];
  for (index = _i = 0, _len = participantNames.length; _i < _len; index = ++_i) {
    item = participantNames[index];
    lis.push("<li>" + item + " [<a href='#' class='removeParticipant' participant_name='" + item + "'>x</a>]</li>");
  }
  return lis.join("\n");
};

getStoriesLis = function(stories) {
  var index, item, lis, _i, _len;
  lis = [];
  for (index = _i = 0, _len = stories.length; _i < _len; index = ++_i) {
    item = stories[index];
    lis.push("<li>" + item + "</li>");
  }
  return lis.join("\n");
};

getCardFace = function(displayNumbers, val) {
  if (val === null) {
    return "-";
  } else if (displayNumbers) {
    return val;
  } else {
    return "?";
  }
};

countVoted = function(votes) {
  var n, names, total, _i, _len;
  names = Object.keys(votes);
  total = 0;
  for (_i = 0, _len = names.length; _i < _len; _i++) {
    n = names[_i];
    if (votes[n] !== null) {
      total++;
    }
  }
  return total;
};

populateCards = function(votes) {
  var displayNumbers, n, names, namesCount, result, votedCount, _i, _len;
  names = Object.keys(votes);
  namesCount = names.length;
  votedCount = countVoted(votes);
  displayNumbers = namesCount === votedCount;
  result = "";
  for (_i = 0, _len = names.length; _i < _len; _i++) {
    n = names[_i];
    result += "<div class='card_holder'><div class='card'>" + getCardFace(displayNumbers, votes[n]) + "</div>" + n + "</div>";
  }
  result += "<div style='clear:both'></div>";
  return $("#cards").html(result);
};

window.StoriesCtrl = StoriesCtrl;

$(function() {
  var i, qrCtrl, roomId, socket, socketUrl, storiesCtrl, url, votes;
  qrCtrl = QRCtrl($, QRCodeJSCodeGen);
  qrCtrl.generateQRCode();
  url = $("#url").val();
  socketUrl = $("#socketUrl").val();
  roomId = $("#roomId").val();
  votes = {};
  socket = io.connect(socketUrl);
  socket.emit("ask", {
    room: roomId
  });
  socket.on('voteRefresh', function(data) {
    var participantNames;
    if (data.room === roomId) {
      votes = data.votes;
      console.log("vote refreshed: ");
      console.log(data.votes);
      participantNames = Object.keys(data.votes);
      $("#participantsCount").html(participantNames.length);
      $("#participants").html(getParticipantsLis(participantNames));
      return populateCards(data.votes);
    }
  });
  $(document).on("click", "a.removeParticipant", function(evt) {
    var participantName;
    participantName = $(evt.srcElement).attr("participant_name");
    console.log("Removing participant with name : " + participantName);
    return socket.emit("removeParticipant", {
      room: roomId,
      name: participantName
    });
  });
  i = 0;
  $("#link").click(function() {
    var left, top;
    top = 0 + (550 * (i % 2));
    left = 25 + (330 * Math.floor(i / 2));
    window.open(url, "Join" + (i++), "width=320,height=480,top=" + top + ",left=" + left + ",toolbar=0,resizable=0,menubar=0", false);
    return false;
  });
  return $("#btn").click(function() {
    return socket.emit('my other event', {
      my: 'data'
    });
  });
});